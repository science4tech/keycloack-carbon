{"version":3,"file":"Login-DkveiPAg.js","sources":["../../node_modules/@carbon/react/es/components/Checkbox/Checkbox.js","../../src/keycloak-theme/login/pages/Login.tsx"],"sourcesContent":["/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport PropTypes from 'prop-types';\nimport React__default from 'react';\nimport cx from 'classnames';\nimport '../Text/index.js';\nimport { usePrefix } from '../../internal/usePrefix.js';\nimport { WarningFilled, WarningAltFilled } from '@carbon/icons-react';\nimport setupGetInstanceId from '../../tools/setupGetInstanceId.js';\nimport { noopFn } from '../../internal/noopFn.js';\nimport { Text } from '../Text/Text.js';\n\nconst getInstanceId = setupGetInstanceId();\nconst Checkbox = /*#__PURE__*/React__default.forwardRef((_ref, ref) => {\n  let {\n    className,\n    helperText,\n    id,\n    labelText,\n    onChange = noopFn,\n    onClick,\n    indeterminate = false,\n    invalid,\n    invalidText,\n    hideLabel,\n    readOnly,\n    title = '',\n    warn,\n    warnText,\n    slug,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const showWarning = !readOnly && !invalid && warn;\n  const showHelper = !invalid && !warn;\n  const checkboxGroupInstanceId = getInstanceId();\n  const helperId = !helperText ? undefined : `checkbox-helper-text-${checkboxGroupInstanceId}`;\n  const helper = helperText ? /*#__PURE__*/React__default.createElement(\"div\", {\n    id: helperId,\n    className: `${prefix}--form__helper-text`\n  }, helperText) : null;\n  const wrapperClasses = cx(`${prefix}--form-item`, `${prefix}--checkbox-wrapper`, className, {\n    [`${prefix}--checkbox-wrapper--readonly`]: readOnly,\n    [`${prefix}--checkbox-wrapper--invalid`]: !readOnly && invalid,\n    [`${prefix}--checkbox-wrapper--warning`]: showWarning,\n    [`${prefix}--checkbox-wrapper--slug`]: slug\n  });\n  const innerLabelClasses = cx(`${prefix}--checkbox-label-text`, {\n    [`${prefix}--visually-hidden`]: hideLabel\n  });\n  let normalizedSlug;\n  if (slug && /*#__PURE__*/React__default.isValidElement(slug)) {\n    const size = slug.props?.['kind'] === 'inline' ? 'md' : 'mini';\n    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {\n      size\n    });\n  }\n  return /*#__PURE__*/React__default.createElement(\"div\", {\n    className: wrapperClasses\n  }, /*#__PURE__*/React__default.createElement(\"input\", _extends({}, other, {\n    type: \"checkbox\",\n    \"data-invalid\": invalid ? true : undefined,\n    onChange: evt => {\n      if (!readOnly && onChange) {\n        onChange(evt, {\n          checked: evt.target.checked,\n          id\n        });\n      }\n    },\n    className: `${prefix}--checkbox`,\n    id: id,\n    ref: el => {\n      if (el) {\n        el.indeterminate = indeterminate ?? false;\n      }\n      if (typeof ref === 'function') {\n        ref(el);\n      } else if (ref && Object(ref) === ref) {\n        ref.current = el;\n      }\n    }\n    // readonly attribute not applicable to type=\"checkbox\"\n    // see - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\n    ,\n    \"aria-readonly\": readOnly,\n    onClick: evt => {\n      if (readOnly) {\n        // prevent default stops the checkbox being updated\n        evt.preventDefault();\n      }\n      // pass onClick event on to the user even if readonly\n      if (onClick) {\n        onClick(evt);\n      }\n    }\n  })), /*#__PURE__*/React__default.createElement(\"label\", {\n    htmlFor: id,\n    className: `${prefix}--checkbox-label`,\n    title: title\n  }, /*#__PURE__*/React__default.createElement(Text, {\n    className: innerLabelClasses\n  }, labelText, normalizedSlug)), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--checkbox__validation-msg`\n  }, !readOnly && invalid && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningFilled, {\n    className: `${prefix}--checkbox__invalid-icon`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, invalidText)), showWarning && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(WarningAltFilled, {\n    className: `${prefix}--checkbox__invalid-icon ${prefix}--checkbox__invalid-icon--warning`\n  }), /*#__PURE__*/React__default.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, warnText))), showHelper && helper);\n});\nCheckbox.propTypes = {\n  /**\n   * Specify whether the underlying input should be checked\n   */\n  checked: PropTypes.bool,\n  /**\n   * Specify an optional className to be applied to the <label> node\n   */\n  className: PropTypes.string,\n  /**\n   * Specify whether the underlying input should be checked by default\n   */\n  defaultChecked: PropTypes.bool,\n  /**\n   * Specify whether the Checkbox should be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Provide text for the form group for additional help\n   */\n  helperText: PropTypes.node,\n  /**\n   * Specify whether the label should be hidden, or not\n   */\n  hideLabel: PropTypes.bool,\n  /**\n   * Provide an `id` to uniquely identify the Checkbox input\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Specify whether the Checkbox is in an indeterminate state\n   */\n  indeterminate: PropTypes.bool,\n  /**\n   * Specify whether the Checkbox is currently invalid\n   */\n  invalid: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the Checkbox is in an invalid state\n   */\n  invalidText: PropTypes.node,\n  /**\n   * Provide a label to provide a description of the Checkbox input that you are\n   * exposing to the user\n   */\n  labelText: PropTypes.node.isRequired,\n  /**\n   * Provide an optional handler that is called when the internal state of\n   * Checkbox changes. This handler is called with event and state info.\n   * `(event, { checked, id }) => void`\n   */\n  onChange: PropTypes.func,\n  /**\n   * Specify whether the Checkbox is read-only\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `Checkbox` component\n   */\n  slug: PropTypes.node,\n  /**\n   * Specify a title for the <label> node for the Checkbox\n   */\n  title: PropTypes.string,\n  /**\n   * Specify whether the Checkbox is currently in warning state\n   */\n  warn: PropTypes.bool,\n  /**\n   * Provide the text that is displayed when the Checkbox is in warning state\n   */\n  warnText: PropTypes.node\n};\nCheckbox.displayName = 'Checkbox';\n\nexport { Checkbox as default };\n","import { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\nimport {Button, Checkbox, Layer, Link, TextInput} from \"@carbon/react\";\nimport {ArrowRight} from \"@carbon/icons-react\";\nimport {CustomTextInput} from \"../../custom-text-input.tsx\";\n\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\n\nif (my_custom_param !== null) {\n    console.log(\"my_custom_param:\", my_custom_param);\n}\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayInfo={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled\n            }\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                <div id=\"kc-registration\">\n                </div>\n            }\n        >\n\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\n                <div\n                    id=\"kc-form-wrapper\"\n                    className={clsx(\n                        realm.password &&\n                        social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={'border-t border-solid border-[--cds-border-subtle-01] mx-4 mt-6'}></div>\n                            <div className={'p-4 '}>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <>\n                                            <Layer>\n                                                <TextInput\n                                                    id={autoCompleteHelper}\n                                                    type=\"text\"\n                                                    labelText={msg(label)}\n                                                    className={getClassName(\"kcLabelClass\")}\n                                                    placeholder={'yourname@email.com'}\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    tabIndex={1}\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </Layer>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"),'mt-4')}>\n                                <Layer>\n                                <CustomTextInput.PasswordInput\n                                    labelText={msg(\"password\")}\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={clsx(getClassName(\"kcInputClass\"),)}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                                </Layer>\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n\n                                <div className={'flex justify-between'}>\n                                <div id=\"kc-form-options\" className={'mt-8'}>\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <Checkbox\n\n                                            id=\"rememberMe\"\n                                            name=\"rememberMe\"\n                                            {...(login.rememberMe === \"on\"\n                                                ? {\n                                                \"checked\": true\n                                            }\n                                                : {})}\n                                            labelText={msg(\"rememberMe\")} />\n                                    )}\n                                </div>\n                                <div className={clsx(getClassName(\"kcFormOptionsWrapperClass\"),'mt-8')}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <Link tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")} </Link>\n                                        </span>\n                                    )}\n                                </div>\n                                </div>\n                            </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={clsx(getClassName(\"kcFormGroupClass\"),'flex justify-end !mt-[23px]')}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                            \"value\": auth.selectedCredential\n                                        }\n                                        : {})}\n                                />\n                                <Button\n                                    tabIndex={4}\n                                    size={'xl'}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\"),\n                                        'w-1/2'\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                    kind=\"primary\"\n                                    renderIcon={(props) => <ArrowRight size={24} {...props} />} iconDescription=\"Log in\"> {msgStr(\"doLogIn\")}</Button>\n                            </div>\n                        </form>\n                    )}\n                </div>\n            </div>\n        </Template>\n    );\n}\n"],"names":["getInstanceId","setupGetInstanceId","Checkbox","React__default","_ref","ref","className","helperText","id","labelText","onChange","noopFn","onClick","indeterminate","invalid","invalidText","hideLabel","readOnly","title","warn","warnText","slug","other","prefix","usePrefix","showWarning","showHelper","checkboxGroupInstanceId","helperId","helper","wrapperClasses","cx","innerLabelClasses","normalizedSlug","size","_a","_extends","evt","el","Text","WarningFilled","WarningAltFilled","PropTypes","my_custom_param","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","useState","onSubmit","useConstCallback","e","formElement","jsx","clsx","jsxs","label","autoCompleteHelper","Fragment","Layer","TextInput","CustomTextInput","Link","Button","ArrowRight"],"mappings":"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","x_google_ignoreList":[0]}